// SaveasEx.mac
$mn = "「名前を付けて保存」をちょっと便利に - ";
// copyright (C) taketori <taketori at x10d.jp>
// 動作環境は、秀丸(Ver.8.00以上)・COMがインストール・読み出し・実行ができ、編集中ファイルの読み出し・実行、および保存先のフォルダにて読み出し・書き込みができる 環境。
// 設定によっては、本マクロと同じフォルダにて、ファイルを作成・書き込みできること。
// 以上の詳細は、配布ファイルに同梱の<README.txt>を参照。本マクロのマニュアルは<SaveasEx.mac.txt>。

//// 設定。設定に当たっては配布ファイルに同梱の<SaveasEx.mac.txt>(マニュアル)を参照。
#search_lim = 5;
#conf_save = 0x001 | 0x004 | 0x010 | 0x020 | 0x040 | 0x100 | 0x200;
$mount_info = macrodir + "\\mount.info";
$tilde = "MyDocuments";
#shebang = 0x0001 | 0x0010 | 0x0020 | 0x0040 | 0x0100 | 0x1000 | 0x2000;
#search_fn = 0x1 | 0x2;
#fregopt = 0x001;
#fn_len = 2;
#del_line = 0x001 | 0x002 | 0x010 | 0x020 | 0x100;
//// 設定、ここまで ////////////////////

// 実行できない条件の時は、さっさと終了する。
if( version < 800 ){
	message $mn + "\n秀丸のバージョンが古いです。マクロを終了します。";
	endmacro;
}
if( !#search_lim ){
	message $mn + "\n#search_lim(ファイル名らしき文字列を検索する行数)が、設定されていないか 0 のために、検索できません。マクロを終了します。";
	endmacro;
}
if( #fn_len < 2){
	message $mn + "\n#fn_len(ファイル名と思わしき文字列の最低文字列長)が、設定されていないか 短すぎるために、続行しません。マクロを終了します。";
	endmacro;
}
if( (getconfig("ColorFN") || #search_fn) == 0 ){		// ColorFN: ファイルと思わしき場所
	message $mn + "\nファイルタイプ別設定で「ファイル名と思わしき場所のカラー表示」をしない設定のため、ファイル名を探せません。マクロを終了します。\n(中断させないためには、カラー表示するか、" + currentmacrobasename + ".init.macを編集。)";
	endmacro;
}
if( #selecting & 0x00F == 0  && (rectselecting || selecting) ){
	message $mn + "\n範囲選択されており、その状態で起動したら終了する設定になっているため、マクロを終了します。";
	endmacro;
}

// 初期設定
#_[0] = x;	#_[1] = y;
$_[0] = searchbuffer;	#_[2] = searchoption;	$_[1] = getsearchhist(0);
#_[3] = foundhilighting;	$_[2] = foundbuffer;	#_[4] = foundoption;
#_[5] = overwrite;	#_[6] = browsemode;	#_[7] = readonly;	#_[8] = imestate;	#_[9] = freecursor;
if( #_[5] )	overwriteswitch;
if( #_[6] )	browsemodeswitch;
if( #_[7] )	readonlyswitch;
if( #_[8] )	imeswitch;
if( #_[9] )	freecursorswitch;
setcompatiblemode 0x0002 | 0x0008 | 0x0200;		// 0x002=折りたたみを無視ししてなるべく維持, 0x0008=部分編集を無視してなるべく維持, 0x0200=検索での表示を「範囲選択」。
$_[3] = filename2;
#search_lim = #search_lim * (#search_lim < linecount2) + linecount2 * (linecount2 < #search_lim);
begingroupundo;
escape;
forceinselect 1;
disabledraw;

main:
	// 下記 * 〜 * までの説明 //
	//1&&!0^(0&&0) = 1 : 1&&1^0 = 1&&1
	//1&&!0^(0&&1) = 1 : 1&&1^0 = 1&&1
	//1&&!1^(1&&0) = 0 : 1&&0^0 = 1&&0
	//1&&!1^(1&&1) = 1 : 1&&0^1 = 1&&1

	//範囲選択時、選択範囲の1行目をファイル名にして終了。
	if(selecting)	call use_sel;
	if($$return != "")	call change_fn $$return;		//==>
	escape;

	// カラーマーカーがあれば、それをファイル名にして終了。
////TODO:引数付きで起動されたとき、第1引数をファイル名にする。第2引数以降は、同じ名前の変数に格納。
	##cmarker = false;
	call search_cmarker;
	if(##return)
		call change_fn gettext(seltopx, seltopy, selendx, selendy, true);		//==>

	gofiletop;

	// shebang行の ! 前の記号を探す。
	$$shb = "";
	call search_shebang;
	if($$return != ""){
		movetolineno 1, 2;		// ** shebangを無視するため、論理行2行目の先頭へ。
	}
	##cc = getconfig("ColorComment");
	if( #shebang & 0x0001
	&& 2 <= #search_lim
	&& ( #shebang & 0x0010 && currentconfigset == ""
		|| #shebang & 0x0040 && ##cc == 24/*言語なし*/
		//*
		|| (#shebang & 0x0020 && ##cc == 0)
			&& (#shebang & 0x0400 == 0)
				^ (#shebang & 0x0400 != 0 && colorcode & 0x1F == 0x03/*コメント部分*/)
		|| (#shebang & 0x0080 && 0 < ##cc && ##cc != 24)
			&& (#shebang & 0x0400 == 0)
				^ (#shebang & 0x0400 != 0 && colorcode & 0x1F == 0x03)
		//*
	) ){
		$$shb = $$return;
	}
	// 現在の行(ファイル先頭行かshebangの次行)の文字。linelen2じゃないけど、実用的には問題ないと思う。
	$$this_line = gettext2(0, lineno, linelen, lineno);

	// ファイル名と思われる文字列を取得する。
	if( getconfig("ColorFN") ){
		call point_cur_at_fnstr 0x00, $$shb;
		##cursor = ##return;
		call get_fn;
	}else{
		call search_fnreg;
	}

	// 何も見つからなかったとき、shebang行以外でファイル先頭に近い行全体をファイル名と見なす。
	if( $$return == "" ){
		call locate_fn_in_str $$this_line;
		if( $$return == "" ){
			// ファイル名と思われる文字列が存在しない場合。秀丸の名前をつけて保存を利用する。
			title $mn + "ファイル名と思われる文字列が存在しないっぽい。";
			SAVEAS;
			call end_macro;
		}
		searchdown $$return;		// del_lineが、範囲選択されていることを前提に作られているので、ここで検索=範囲選択。
	}
	$$fnstr = $$return;

	change_fn:
	// ファイル名を変更する実際の処理。

	if($$1 != "")	$$fnstr = $$1;
	$$ccs = currentconfigset;
	##fso = createobject("Scripting.FileSystemObject");
	call get_fbase $$fnstr, ##fso;
	$$fbase = $$return;
	call set_save_dir $$fnstr, $$fbase, ##fso;
	$$save_dir = leftstr($$return, strstr($$return, "*"));
	##disp_conf = val(midstr($$return, strstr($$return, "*") + 1, ));  // 保存の確認ダイアログを表示したか。
	call del_line $$save_dir, $$fbase, ##disp_conf;
	escape;
	call saveas_fn $$save_dir, $$fbase, ##fso, ##disp_conf;
	if( ##cursor & 0x20 ){
		call was_shebanged $$shb, $$ccs;
		if( !##return ){		// shebangではなかった。
			changename $_[3];
		}
	}

	call end_macro;

endmacro;

search_cmarker:
// カラーマーカーを探す。
//arg: --
//ret: #適切なカラーマーカーが見つかったか。
//note: ##retがtrueの時、カラーマーカー部分を範囲選択している。カーソルはその末尾。

	return;
	##ret = false;
	nextcolormarker 0x01;
	if( result
	&& (getcolormarker(0x01) == hex(getconfigcolor(21/*ファイル名部分*/, 0/*文字色*/))
		|| "0xFFFFFFFF"        == hex(getconfigcolor(21/*ファイル名部分*/, 0/*文字色*/)))
	&& (getcolormarker(0x02) == hex(getconfigcolor(21/*ファイル名部分*/, 1/*背景色*/))
		|| "0xFFFFFFFF"        == hex(getconfigcolor(21/*ファイル名部分*/, 1/*背景色*/)))
	&& (getcolormarker(0x04) == hex(getconfigcolor(21/*ファイル名部分*/, 2/*スタイル*/))
		|| "0xFFFFFFFF"        == hex(getconfigcolor(21/*ファイル名部分*/, 2/*スタイル*/)))){
		beginsel;
		nextcolormarker 0x02;
		if(seltoplineno == selendlineno && seltopcolumn + #fn_len < selendcolumn){
			##ret = true;
		}else{
			escape;
			call search_cmarker;
			##ret = ##return;
		}
	}

return ##ret;

use_sel:
// 範囲選択しているときの処理。
// この関数を実行するときは、「selecting && #selecting & 0x003」が真。
//arg: --
//ret: 選択範囲の1行目のうち、ファイル名として使える文字列

	question $mn + "\n範囲選択されています。選択範囲の1行目をファイル名と見なし、「名前をつけて保存」します。";
	if(!result)	return;
	call locate_fn_in_str gettext(seltopx, seltopy, selendx, selendy, true);

return $$return;

search_shebang:
// shebang行を探して、見つかれば ! の直前の文字列を返す。
//arg:
//ret: $ ! の直前の文字列。

	$$l1 = gettext2(0, 1, linelen2, 1);

	if(strlen($$l1) <= 2){
		return "";
	}

	// #! の検索。
	if( #shebang & 0x0100 && leftstr($$l1, 2) == "#!"){
		return "#";
	}

	// ! の検索。
	$$ret = "";
	##pos = 0;
	##c = unicode(wcsmidstr($$l1, ##pos, 1));
	while( '!' < ##c && ##c <= '/'
		||	':' <= ##c && ##c <= '@'
		||	'[' <= ##c && ##c <= '`'
		||	'{' <= ##c && ##c <= '~' )
	{
		if( wcsmidstr($$l1, ##pos + 1, 1) == "!" ){
			$$ret = leftstr($$l1, ##pos + 1);
			##pos = ##pos + 1;
			if( #shebang & 0x0200 == 0 || ##pos == wcslen($$l1) ){
				break;
			}
		}
		##pos = ##pos + 1;
		##c = unicode(wcsmidstr($$l1, ##pos, 1));
	}

	// !の直後に半角記号が存在しないことを確認する。
	if( ##pos <= strlen($$ret) + 1 && 2 <= ##pos ){
		return $$ret;
	}

return "";

point_cur_at_fnstr:
// 一番最初の、shebangの！の前の文字で始まっている行orコメント行まで、カーソルを移動する。
// [ファイルタイプ別の設定-デザイン-複数行コメント]が「なし」の時やその行がすでにコメント行の時は、その行にとどまりカーソルがファイル名と思わしき文字列になるまで、その行でカーソルを右に移動する。その行にない場合、下に移動できるなら移動し、point_cur_at_fnstrを再帰する。
//spec: 行の途中でコメント部分から外れ、そこにファイル名があるような場合でも、それを対象としてしまう。
//spec: ファイル名のカラー表示のカスタマイズで、「コメント中のみ」がチェックされていない場合も、コメント中から探す。
	//ファイルに使えない文字   *?"<>|\/:
//arg:#強制的にコメント以外からも探すか, $コメント開始文字列(shebangの!の前の記号)
//ret:0x00=コメント行から検索
//		0x10=コメント行以外から検索
//		0x20=shebangの！の前の文字で始まっている行から検索
//		0x00=ファイルと思わしき場所の先頭にカーソル。
//		0x01=探査した最終行の行末orEOFの直前にカーソル。

	##i = ##1;
	$$s = $$2;
	golinetop2;

	// shebangの！の前の文字で始まっている行になるまで、カーソルを次行に移動する。
	if( $$s != "" ){
		##i = 0x20;
		while( lineno < #search_lim
			&& gettext2(0, lineno, ((strlen($$s) < linelen2) * strlen($$s) + (linelen2 < strlen($$s)) * linelen2), lineno) != $$s )		//linelen2と$$sとの長さを比較して短い方まで文字列を取得する。
		{
			moveto2 0, lineno + 1;
		}
		right strlen($$s);		//whileでトラップされているから、linelen2<strlen($$s)はない。
	}

	// コメント行の中を検索(コメント行になるまで、カーソルを次行に移動する)。
	else if(!##i){
		while( lineno < #search_lim
			&& colorcode & 0x1F != 0x03 )		//コメント部分 じゃない。
		{
			moveto2 0, lineno + 1;
		}
	}

	// カーソルがファイル名と思わしき場所or行端になるまで、カーソルを右に移動する。
	// コメント行じゃなかったとしても、1文字も動かないので、問題なし。
	while(colorcode & 0x1F != 0x15 && column < linelen2)
	{
		right;
	}

	// カーソルの後ろの状態を返す。
	if( colorcode & 0x1F == 0x15 )		//ファイル名と思わしき場所 の先頭
		return ##i | 0x00;
	if(#search_lim <= lineno || code == eof){		//改行記号で検索範囲最後orEOF上
		question $mn + "\n" + "ファイル名らしきものが、見つからなかった。(´д`)\n先頭に戻って、"
		+ leftstr("コメント行", ($$s != "") * 10)
		+ leftstr("コメント行以外", (!##i) * 14)
		+ "から探す？";
		if( result && $$s != "" ){
			$$s = "";
			##i = 0x00;
		}else if( result && (!##i) ){
			##i = 0x10;
		}else{
			return ##i | 0x01;
		}
		gofiletop;
	}else{		//改行記号
		moveto2 0, lineno + 1;
	}
	call point_cur_at_fnstr ##i, $$s;

return ##return;

get_fn:
// ファイル名と思わしき文字列を取得する。
//arg:
//ret: $ファイル名と思わしき文字列
//cursor: ファイル名風文字列の末尾

	##fn_c1 = column;

	beginsel;
	while( colorcode & 0x1F == 0x15 )		// ファイル名と思わしき場所。
		right;

	##fn_c2 = column;

	$$fn = gettext2( ##fn_c1, lineno, ##fn_c2, lineno, true );

return $$fn;

search_fnreg:
//ファイル名と思われる文字列を正規表現で検索する。
//arg:
//ret: $ファイル名と思わしき文字列
//note: CustomEUF(Email,URL,ファイル名のカスタマイズ)=
//		0x00N00 ファイル名、0x000N0 URL、0x0000N Email
//		0x00100 RegEx、0x00200 大/小、0x00300 RegEx+大/小、0x00400 単語じゃない、
//		0x01000 文字定数中のみ, 0x02000 コメント定数中のみ

	##s_opt = getconfig("CustomEUF");
	if( #search_fn & 0x2 && ##s_opt & 0x00100 ){
		// [ファイルタイプ別の設定-ファイル名のカスタマイズ]を利用（「自動判断」の場合は0x1と同様）。
		setsearch getconfig("CustomFile"),
							(##s_opt & 0x00400 == 0) * 0x00000001						// 単語の検索
							| (0x00200 & ##s_opt) / 0x00200 * 0x00000002		// 大文字/小文字の区別
							| (0x00100 & ##s_opt) / 0x00100 * 0x00000010		// 正規表現
							| (0x02000 & ##s_opt) / 0x02000 * 0x00020000		// 追加の条件（コメント）
							| (0x01000 & ##s_opt) / 0x01000 * 0x00100000		// 追加の条件（文字列）
							| (0x02000 & ##s_opt != 0 || 0x01000 & ##s_opt != 0) * 0x00400000		// 追加の条件（「のみ」）
							| 0x00800000;																		// 追加の条件が有効であるかどうか
	}
	if( (#search_fn & 0x1) && strlen($fregex) && (##s_opt & 0x00100 == 0) ){
		// $fregex・#fregoptを利用。$fregexが空白の時はマクロ終了。
		setsearch $fregex,
							(##fregopt & 0x001) * 0x00000001							// 単語の検索
							| (0x002 & ##fregopt) / 0x002 * 0x00000002		// 大文字/小文字の区別
							| 0x00000010																	// 正規表現
							| (0x020 & ##fregopt) / 0x020 * 0x00020000		// 追加の条件（コメント）
							| (0x010 & ##fregopt) / 0x010 * 0x00100000		// 追加の条件（文字列）
							| (0x020 & ##fregopt != 0 || 0x010 & ##fregopt != 0) * 0x00400000		// 追加の条件（「のみ」）
							| 0x00800000;																	// 追加の条件が有効であるかどうか
	}else{
		call end_macro;
	}

	finddown2;
	if( result || ytolineno(1, foundtopy) <= #search_lim ){
		return gettext(foundtopx, foundtopy, foundendx, foundendy, true);
	}

return "";

locate_fn_in_str:
// 第1引数の、ファイル名に使える文字からなる文字列(空白も含む)を探し出して、もっとも先頭のものを返す。
//arg: $ファイル先頭行かshebangの次行の文字列。
//ret: $ファイル名に使える文字からなると思われる文字列(空白も含む)

	$$ret = "";
	$$inapt = "\t<>*?|\"";		// ファイル名に使えない文字列
	##b = 0; ##n = 0;
	while( strstr($$inapt + "　 ", midstr($$1, ##b, 1)) != -1 ){
		##b = ##b + 1;
	}
		while( strstr($$inapt, midstr($$1, ##b + ##n, 1)) == -1 && ##b + ##n < strlen($$1)){
			##n = ##n + 1;
		}

	// 短すぎる場合、返値を""となるようにする。
	if(##n < #fn_len)
		##n = 0;

return midstr($$1, ##b, ##n);

get_fbase:
// ベース名になると思われる文字列を返す。ベース名とは、秀丸でいう「ファイル名の、パスを含まない、ベース名」。
//arg: $ファイルパス名と思われる文字列, #FileSystemObject
//ret: $ベース名になると思われる文字列

	$$ret = $$1;
	##fb = -1;
	if(##2){
		$$ret = callmethod_returnstr(##2, "GetFileName", $$1);
	}else{
		##fb = strrstr($$1, "/");
		if( ##fb < strrstr($$1, "\\") )
			##fb = strrstr($$1, "\\");
		if( -1 < ##fb )
			$$ret = midstr( $$1, ##fb + 1, );
	}
	if($$ret == "")
		$$ret = input($mn + "\nファイル名を入力してください。\n(フォルダ名は入力しないで)", basename2);
	if($$ret == "")
		call end_macro;

return $$ret;

saveas_fn:
// 実際にフォルダを作って、そこに保存する(ようにファイル名を変える)。
//arg: $保存フォルダ, $ベース名, #FileSystemObject, #保存の確認ダイアログを表示したか
//ret: --

	if( ##3 && callmethod_returnnum(##3, "FolderExists", $$1) == false ){
		callmethod ##3, "CreateFolder", $$1;
		if(!result){
			question $mn + "\nWSHを使ってフォルダを作るのに失敗した。\nはい : DOSで作る。いいえ : マクロ終了";
			if(!result){
				call end_macro;
			}
		}
	}
	if( !existfile(leftstr($$1, strlen($$1) - (rightstr($$1, 1) == "\\")), 0x10) )		//Note: スラッシュを含む場合、常に真（存在しないことになる）。
		run getenv("COMSPEC") + " /C mkdir \"" + $$1 + "\" > " + currentmacrofilename + ".log";

	// 0x100=ダイアログを表示したら名前を変更。0x200=表示しなかったら名前を変更。
	if( (#conf_save & 0x100 && ##4) || (#conf_save & 0x200 && ##4 == false) )
		changename $$1 + $$2;
	else
		saveas $$1 + $$2;

return;

set_save_dir:
// ファイルを保存するフォルダを決定する。ファイル名(フルパス)と思われる文字列のうち、スラッシュで始まる文字列やチルダを適切なフォルダ名に変更したり、パスの相対指定を絶対指定にする。フォルダの確認もする。
//arg: $ファイル名(フルパス)と思われる文字列, $ファイル名(フルパス)と思われる文字列のベースネームと思われる文字列, #FileSystemObject
//ret: $$1のフォルダ名を適切に変更した文字列*保存の確認ダイアログを表示したか

	$$fbase = $$2;

	// フォルダ名をWindows式フォルダに変換する。
	$$return = "";
	$$save_dir = leftstr( $$1, strlen($$1) - strlen($$fbase) );
	if( $$save_dir == "" )
		$$save_dir = directory2 + "\\";
	else{
		call to_win $$save_dir, ##3;
		$$save_dir = leftstr($$return, strstr($$return, "*"));
		##to_win_ret = val(midstr($$return, strstr($$return, "*") + 1, ));
	}

	// 確認ダイアログを表示して、再入力を促す。
	##disp_conf = false;
	if( (#conf_save & 0x001 && ##to_win_ret & 0x001)
		|| (#conf_save & 0x002 && ##to_win_ret & 0x002)
		|| (#conf_save & 0x004 && leftstr( $$save_dir, 1 ) == "\\" )
		|| (#conf_save & 0x010 && existfile($$save_dir + $$fbase) )
		|| (#conf_save & 0x020 && existfile(leftstr($$save_dir, strlen($$save_dir) - (rightstr($$save_dir, 1) == "\\")), 0x10) == false )
		|| (#conf_save & 0x040 && $$fbase != basename && $$fbase != basename2 && $$fbase != basename3)
	){
		$$save_dir = input("以下のフォルダに「"+ $$fbase +"」として保存します。\n（文字列頭の\\はルートフォルダと同義です。）", $$save_dir );
		if( result == false || $$save_dir == "" )
			call end_macro;
		##disp_conf = true;
	}

return $$save_dir + "*" + str(##disp_conf);

to_win:
// フォルダ名をWindows式フォルダに変換する。
//arg: $ファイル名と思われる文字列, #FileSystemObject
//use: $mount_info
//ret: $ret($$1のフォルダ名を適切に変更した文字列)*#conf_saveで判定に使うための数値
//PLAN: returnに配列など複数の項目が渡せるようになったら、それを使う。

	$$ret = "";
	##retnum = 0;
	$$left = leftstr($$1, 1);

	// mount.info情報を利用して、置換する。
	if( existfile($mount_info) ){		// mount.infoがあるとき。
		##retnum = 0x002;
		if( $$left == "~" && getinistr( $mount_info, "mount", "/home" ) != "" ){
			// チルダを置換。
			$$ret = getinistr( $mount_info, "mount", "/home" ) + midstr( $$1, 1, );
		}else if( $$left == "/" ){
			// 先頭がスラッシュの時、それに続く一連の文字列をmount.infoから検索。
			if( getinistr( $mount_info, "mount", "/" ) != "" ){
				$$str = "0 " + getinistr( $mount_info, "mount", "/" );
			}
			##m = 1;
			$$c = midstr($$1, ##m, 1);
			while( $$c != "\\" && ##m < strlen($$1) ){
				while( $$c != "\\" && $$c != "/" && ##m < strlen($$1) ){
					$$c = midstr($$1, ##m, 1);
					##m = ##m + 1;
				}
				$$str = "";
				if( getinistr($mount_info, "mount", leftstr($$1, ##m - 1)) != "" )
					$$str = str(##m - 1) + " " + getinistr($mount_info, "mount", leftstr($$1, ##m - 1));
				##m = ##m + 1;
			}
			$$ret = midstr($$str, strstr($$str, " ") + 1, )
						+ midstr($$1, val(leftstr($$str, strstr($$str, " "))) + (rightstr($$str, 1) == "\\"), );
		}
	}

	// 先頭のチルダを変換した後、相対パスやスラッシュを絶対パスに変換する。。
	if($$ret == ""){		// mount.infoなかったor先頭がチルダでもスラッシュでもないorチルダだけどmount.infoから引けないorスラッシュだけど引けない。
		if($$left == "~"){
			$$ret = member( getpropobj( createobject("WScript.Shell"), "SpecialFolders" ),
											"Item", $tilde )
							+ midstr( $$1, 1, );
		}else{
			$$ret = $$1;
		}
	}

	// Windows的にきちんとしたフォルダ名に戻す。
	if(##2){
		##retnum = ##retnum | 0x001 * ($$ret != callmethod_returnstr(##2, "GetAbsolutePathName", $$ret));
		$$ret = callmethod_returnstr(##2, "GetAbsolutePathName", $$ret) + "\\";
	}else{
		message $mn + "\nWSHが使えません。";
		call end_macro;
		//PLAN: WSHが使えないときの、スラッシュ・相対パスの変換アルゴリズム。
		//$$ret = "\\" + midstr( $$1, 1, strlen($$1) );
	}

return $$ret + "*" + str(##retnum);

del_line:
// 改名前のフルパスとファイル名風文字列とを比較して、同義の場合は当該部分を削除する
//arg: $保存しようとするディレクトリ名, $ファイルベース名, #確認ダイアログを表示した
//ret: 変更(削除を含む)したかどうか。

	if( ((#del_line & 0x001 && ##3) || (#del_line & 0x002 && (!##3)))
		&& ( filename2 == $$1 + $$2
			|| #del_line & 0x100 && filetype == "new"
			|| #del_line & 0x200 && basename2 == $$2 )
	){
		if(#del_line & 0x010/*フォルダのみ*/)
			insert $$2;
		else
			deleteline2;
		return 1;
	}

return 0;

was_shebanged:
//ファイル名を変更後、1行目がshebang行である( ! の直前にスペースを挿入しスペースがコメント部分のまま、さらにその直前にも挿入しコメント部分でなくなる)かを確認する。
////! ←といった場合もshebangでなかったと判定される。
//arg: $ shebangの ! の前の文字列, $ファイル名変更前に適応されていた「設定のリスト」の名前
//ret: 判定結果(0=shebangでなかった。1=shebangであった。2=shebangかどうか不明)。

	##ret = 2;
	if( (#shebang & 0x1000 && $$1 != "")
	&&	(#shebang & 0x2000 == 0)
	^		(#shebang & 0x2000 != 0 && $$2 != currentconfigset) )
	{
		// ! の直前にスペースを挿入。
		moveto2 strlen($$1), 1;
		insert " ";		//挿入する文字は何でもいいと思うけど、スペースだったら確実か。
		if( colorcode & 0x1F == 0x03 ){
			moveto2 strlen($$1) - 1, 1;
			insertfix " ";		//挿入する文字は何でもいいと思うけど、スペースだったら確実か。
			if( colorcode & 0x1F != 0x03 )
				##ret = 1;
			else
				##ret = 0;
			undo 1;
		}else
			##ret = 0;
		undo 1;

	}

return ##ret;

end_macro:

	//TODO: WSH解放

	escape;
	moveto #_[0], #_[1];

	if( #_[5] )	overwriteswitch;
	if( #_[6] )	browsemodeswitch;
	if( #_[7] )	readonlyswitch;
	if( #_[8] )	imeswitch;
	if( #_[9] )	freecursorswitch;

	endgroupundo;

endmacro;
